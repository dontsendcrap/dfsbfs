import heapq 

def a_star(graph, start, goal, heuristic):
    pq=[]
    heapq.heappush(pq,(0+heuristic[start],0,start,[]))
    visited=set()
    while pq:
        hcost,cost,node,path = heapq.heappop(pq)
        
        if node==goal:
            newpath=path+[node]
            return cost,newpath

        if node not in visited:
            newpath=path+[node]
            visited.add(node)
            for adjnode,adjcost in graph[node].items():
                if adjnode not in visited:
                    heapq.heappush(pq,(cost+adjcost+heuristic[adjnode],cost+adjcost,adjnode,newpath))

    return -1

graph = {
'0': {'1': 2, '2': 1},
'1': {'3': 11, '4': 3, '2': 5, '0': 2},
'2': {'0': 1, '1': 5, '4': 1, '5': 15},
'3': {'6': 1, '4': 2, '1': 11},
'4': {'1': 3, '2': 1, '5': 4, '3': 2, '6': 5},
'5': {'2': 15, '4': 4, '6': 1},
'6': {'3': 1, '4': 5, '5': 1},
}
heuristic={
'0': 1,
'1': 3,
'2': 15,
'3': 2,
'4': 1,
'5': 1000,
'6': 0
}
start_node = '0'
goal_node = '6'

cost,path=a_star(graph,start_node,goal_node,heuristic)
print(f'cost: {cost}')
print(f'path: {path}')
